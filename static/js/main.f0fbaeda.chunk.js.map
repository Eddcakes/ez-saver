{"version":3,"sources":["components/ColorModeSwitcher.js","components/Settings.js","components/Today.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","Settings","handleCurrencyChange","currentCurrency","currentSavingMode","handleSavingMode","reversed","handleReversed","useDisclosure","isOpen","onOpen","onClose","btnRef","React","useRef","ref","placement","finalFocusRef","borderBottomWidth","spacing","htmlFor","name","value","onChange","direction","currencyCode","gbp","symbol","usd","eur","mode","day","subunit","week","id","isChecked","disabled","leftIcon","Today","todaysTotal","todaysAmount","currencySymbol","selectedDayjs","savingMode","useState","added","setAdded","dayNumber","dayOfYear","selectedWeek","isoWeek","weeksThisYear","isoWeeksInYear","daysInYear","isLeapYear","runningTotal","todaysDeposit","toFixed","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","gridArea","colorScheme","alignSelf","in","current","max","sequence","ii","push","total","reduce","acc","cur","dayjs","extend","App","currency","setCurrency","setSavingMode","setReversed","theme","height","textAlign","justifyContent","p","newSymbol","newSavingMode","h","w","bg","format","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0fbaeda.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React from 'react';\r\nimport {\r\n  IconButton,\r\n  Drawer,\r\n  useDisclosure,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n  DrawerHeader,\r\n  DrawerBody,\r\n  Stack,\r\n  FormLabel,\r\n  Box,\r\n  RadioGroup,\r\n  Radio,\r\n  Switch,\r\n  Button,\r\n  Text,\r\n} from '@chakra-ui/react';\r\nimport { FaCog } from 'react-icons/fa';\r\nimport { CgExport } from 'react-icons/cg';\r\n\r\nimport { currencyCode, mode } from '../App';\r\n\r\nexport function Settings({\r\n  handleCurrencyChange,\r\n  currentCurrency,\r\n  currentSavingMode,\r\n  handleSavingMode,\r\n  reversed,\r\n  handleReversed,\r\n  ...props\r\n}) {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = React.useRef();\r\n  return (\r\n    <>\r\n      <IconButton\r\n        size='md'\r\n        fontSize='lg'\r\n        aria-label={`Open settings menu`}\r\n        variant='ghost'\r\n        color='current'\r\n        marginLeft='2'\r\n        icon={<FaCog />}\r\n        ref={btnRef}\r\n        onClick={onOpen}\r\n        {...props}\r\n      />\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement='right'\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader borderBottomWidth='1px'>Settings</DrawerHeader>\r\n            <DrawerBody>\r\n              <Stack spacing='1em'>\r\n                <Box>\r\n                  <FormLabel htmlFor='currency'>Currency</FormLabel>\r\n                  <RadioGroup\r\n                    name='currency'\r\n                    value={currentCurrency.name}\r\n                    onChange={handleCurrencyChange}\r\n                  >\r\n                    <Stack spacing={5} direction='row'>\r\n                      <Radio value={currencyCode.gbp.name}>\r\n                        {currencyCode.gbp.symbol}\r\n                      </Radio>\r\n                      <Radio value={currencyCode.usd.name}>\r\n                        {currencyCode.usd.symbol}\r\n                      </Radio>\r\n                      <Radio value={currencyCode.eur.name}>\r\n                        {currencyCode.eur.symbol}\r\n                      </Radio>\r\n                    </Stack>\r\n                  </RadioGroup>\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor='savingMode'>Saving mode</FormLabel>\r\n                  <RadioGroup\r\n                    name='savingMode'\r\n                    value={currentSavingMode}\r\n                    onChange={handleSavingMode}\r\n                  >\r\n                    <Stack spacing={5} direction='row'>\r\n                      <Radio value={mode.day}>\r\n                        1{currentCurrency.subunit} per {mode.day}\r\n                      </Radio>\r\n                      <Radio value={mode.week}>\r\n                        {currentCurrency.symbol}1 per {mode.week}\r\n                      </Radio>\r\n                    </Stack>\r\n                  </RadioGroup>\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor='reversed'>Reversed</FormLabel>\r\n                  <Text fontSize='sm'>\r\n                    Start the year off with the bigger deposits\r\n                  </Text>\r\n                  <Switch\r\n                    id='reversed'\r\n                    isChecked={reversed}\r\n                    onChange={handleReversed}\r\n                    size='lg'\r\n                  />\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor='complete-btn'>\r\n                    Complete up to today\r\n                  </FormLabel>\r\n                  <Text fontSize='sm'>Complete all days up to today</Text>\r\n                  <Button\r\n                    id='complete-btn'\r\n                    aria-label='export data'\r\n                    disabled={true}\r\n                  >\r\n                    Check up to today\r\n                  </Button>\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor='export-btn'>Export data</FormLabel>\r\n                  <Text fontSize='sm'>\r\n                    Data can be exported as a json object\r\n                  </Text>\r\n                  <Button\r\n                    id='export-btn'\r\n                    aria-label='export data'\r\n                    leftIcon={<CgExport />}\r\n                    disabled={true}\r\n                  >\r\n                    Export\r\n                  </Button>\r\n                </Box>\r\n              </Stack>\r\n            </DrawerBody>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport {\r\n  VStack,\r\n  Text,\r\n  Button,\r\n  IconButton,\r\n  Grid,\r\n  GridItem,\r\n  Fade,\r\n} from '@chakra-ui/react';\r\nimport { FaCheck, FaUndo } from 'react-icons/fa';\r\n\r\nimport { mode } from '../App';\r\n\r\nexport function Today({ currencySymbol, selectedDayjs, savingMode, reversed }) {\r\n  const [added, setAdded] = useState(false);\r\n  const dayNumber = selectedDayjs.dayOfYear();\r\n  const selectedWeek = selectedDayjs.isoWeek();\r\n  const weeksThisYear = selectedDayjs.isoWeeksInYear();\r\n  const daysInYear = selectedDayjs.isLeapYear() ? 366 : 365;\r\n  let todaysTotal;\r\n  let todaysAmount;\r\n  switch (savingMode) {\r\n    case mode.day:\r\n      todaysTotal = runningTotal(dayNumber, daysInYear, reversed) / 100;\r\n      // /100 because doing 1p/c a day\r\n      todaysAmount = todaysDeposit(dayNumber, daysInYear, reversed) / 100;\r\n      break;\r\n    case mode.week:\r\n      todaysTotal = runningTotal(selectedWeek, weeksThisYear, reversed);\r\n      todaysAmount = todaysDeposit(selectedWeek, weeksThisYear, reversed);\r\n      break;\r\n    default:\r\n      todaysTotal = runningTotal(dayNumber, daysInYear, reversed) / 100;\r\n      // /100 because doing 1p/c a day\r\n      todaysAmount = todaysDeposit(dayNumber, daysInYear, reversed) / 100;\r\n  }\r\n\r\n  return (\r\n    <VStack spacing={4}>\r\n      {savingMode === mode.day ? (\r\n        <Text>Today is number {dayNumber}</Text>\r\n      ) : (\r\n        <Text>\r\n          It is week {selectedWeek} out of {weeksThisYear}\r\n        </Text>\r\n      )}\r\n      <Text>\r\n        The amount to put away is {currencySymbol.symbol}\r\n        {todaysAmount.toFixed(2)}\r\n      </Text>\r\n      <Grid\r\n        gridTemplateColumns='1fr 2fr 1fr'\r\n        gridTemplateRows='1fr'\r\n        gridTemplateAreas='\". complete undo\"'\r\n      >\r\n        <GridItem gridArea='complete'>\r\n          <Button\r\n            size='lg'\r\n            variant='outline'\r\n            aria-label='Complete today'\r\n            colorScheme='green'\r\n            leftIcon={<FaCheck />}\r\n            disabled={added}\r\n            onClick={() => setAdded(true)}\r\n          >\r\n            Complete\r\n          </Button>\r\n        </GridItem>\r\n        {added === true ? (\r\n          <GridItem gridArea='undo' alignSelf='center'>\r\n            <Fade in={added}>\r\n              <IconButton\r\n                size='md'\r\n                fontSize='lg'\r\n                aria-label={`Reset today's `}\r\n                colorScheme='green'\r\n                icon={<FaUndo />}\r\n                onClick={() => setAdded(false)}\r\n              />\r\n            </Fade>\r\n          </GridItem>\r\n        ) : null}\r\n      </Grid>\r\n      <Text>\r\n        You should have {currencySymbol.symbol}\r\n        {todaysTotal.toFixed(2)} saved so far!\r\n      </Text>\r\n    </VStack>\r\n  );\r\n}\r\n\r\n/* could have a progress bar / with target value ? */\r\n\r\n/* current is the current day/week no, max is the max days or weeks in this year */\r\nfunction runningTotal(current, max, reversed = false) {\r\n  let sequence = [];\r\n  if (!reversed) {\r\n    for (let ii = current; ii > 0; ii--) {\r\n      sequence.push(ii);\r\n    }\r\n  } else {\r\n    for (let ii = max; max - current < ii; ii--) {\r\n      sequence.push(ii);\r\n    }\r\n  }\r\n  const total = sequence.reduce((acc, cur) => acc + cur, 0);\r\n  return total;\r\n}\r\n\r\nfunction todaysDeposit(current, max, reversed = false) {\r\n  let value;\r\n  if (!reversed) {\r\n    value = current;\r\n  } else {\r\n    value = max - current;\r\n  }\r\n  return value;\r\n}\r\n","import { useState } from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  VStack,\n  HStack,\n  Grid,\n  theme,\n  Text,\n} from '@chakra-ui/react';\nimport dayjs from 'dayjs';\nimport isoWeek from 'dayjs/plugin/isoWeek';\nimport isLeapYear from 'dayjs/plugin/isLeapYear';\nimport isoWeeksInYear from 'dayjs/plugin/isoWeeksInYear';\nimport dayOfYear from 'dayjs/plugin/dayOfYear';\n\nimport { ColorModeSwitcher } from './components/ColorModeSwitcher';\nimport { Settings } from './components/Settings';\nimport { Today } from './components/Today';\n\nexport const currencyCode = {\n  gbp: { symbol: '£', subunit: 'p', id: 1, name: 'gbp' },\n  usd: { symbol: '$', subunit: '¢', id: 2, name: 'usd' },\n  eur: { symbol: '€', subunit: 'c', id: 3, name: 'eur' },\n};\n\nexport const mode = { day: 'day', week: 'week' };\n\ndayjs.extend(isLeapYear);\ndayjs.extend(isoWeeksInYear);\ndayjs.extend(dayOfYear);\ndayjs.extend(isoWeek);\n\nfunction App() {\n  //grab defaults from local storage\n  const [selectedDayjs, setSelectedDayjs] = useState(dayjs());\n  const [currency, setCurrency] = useState(currencyCode.gbp);\n  const [savingMode, setSavingMode] = useState(mode.day);\n  const [reversed, setReversed] = useState(false);\n\n  const handleCurrencyChange = (newSymbol) => {\n    setCurrency(currencyCode[`${newSymbol}`]);\n  };\n\n  const handleSavingMode = (newSavingMode) => setSavingMode(newSavingMode);\n\n  const handleReversed = () => setReversed(!reversed);\n\n  const handleDatePicker = (newDate) => setSelectedDayjs(newDate);\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Box height='100vh' textAlign='center' fontSize='xl'>\n        <HStack spacing={8} justifyContent={'flex-end'} p={[4, 4, 4, 4]}>\n          <ColorModeSwitcher />\n          <Settings\n            handleCurrencyChange={handleCurrencyChange}\n            currentCurrency={currency}\n            currentSavingMode={savingMode}\n            handleSavingMode={handleSavingMode}\n            reversed={reversed}\n            handleReversed={handleReversed}\n          />\n        </HStack>\n        <Grid p={3}>\n          <VStack spacing={8}>\n            <Box h='10em' w='10em' bg='teal.500'>\n              Calendar\n              <Text>{selectedDayjs.format('YYYY-MM-DD')}</Text>\n            </Box>\n            <Today\n              currencySymbol={currency}\n              selectedDayjs={selectedDayjs}\n              savingMode={savingMode}\n              reversed={reversed}\n            />\n          </VStack>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}