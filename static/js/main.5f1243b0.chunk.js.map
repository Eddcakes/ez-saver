{"version":3,"sources":["components/ColorModeSwitcher.js","components/DatePicker.js","components/Settings.js","components/Today.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","DatePicker","selectedDate","onChange","inputRef","colorMode","value","parseISO","calendarType","className","Settings","handleCurrencyChange","currentCurrency","currentSavingMode","handleSavingMode","reversed","handleReversed","useDisclosure","isOpen","onOpen","onClose","btnRef","React","useRef","ref","placement","finalFocusRef","borderBottomWidth","spacing","htmlFor","name","direction","currencyCode","gbp","symbol","usd","eur","mode","day","subunit","week","id","isChecked","disabled","leftIcon","Today","todaysTotal","todaysAmount","currencySymbol","savingMode","useState","added","setAdded","dayNumber","getDayOfYear","Date","selectedWeek","getISOWeek","weeksThisYear","getISOWeeksInYear","daysInYear","getDaysInYear","runningTotal","todaysDeposit","toFixed","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","gridArea","colorScheme","alignSelf","in","current","max","sequence","ii","push","total","reduce","acc","cur","App","date","format","setSelectedDate","startOfMonth","calendarView","setCalendarView","currency","setCurrency","setSavingMode","setReversed","handleDatePicker","newDate","nextDate","theme","height","textAlign","justifyContent","p","newSymbol","newSavingMode","formatShortWeekday","onActiveStartDateChange","activeStartDate","view","isSameMonth","isToday","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5f1243b0.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import { useColorMode } from \"@chakra-ui/react\";\r\nimport { parseISO } from \"date-fns\";\r\nimport Calendar from \"react-calendar\";\r\n//import \"react-calendar/dist/Calendar.css\";\r\n\r\n// use my own styles to fit around chakra light/dark mode\r\n// https://github.com/wojtekmaj/react-calendar/issues/446\r\nimport \"./DatePicker.css\";\r\n\r\n//calendarType=\"US\" in order to start weeks with Sunday\r\nexport function DatePicker({ selectedDate, onChange, inputRef, ...props }) {\r\n  const { colorMode } = useColorMode();\r\n  return (\r\n    <Calendar\r\n      value={parseISO(selectedDate)}\r\n      onChange={onChange}\r\n      calendarType='US'\r\n      className={`current-theme-${colorMode}`}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {\r\n  IconButton,\r\n  Drawer,\r\n  useDisclosure,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n  DrawerHeader,\r\n  DrawerBody,\r\n  Stack,\r\n  FormLabel,\r\n  Box,\r\n  RadioGroup,\r\n  Radio,\r\n  Switch,\r\n  Button,\r\n  Text,\r\n} from '@chakra-ui/react';\r\nimport { FaCog } from 'react-icons/fa';\r\nimport { CgExport } from 'react-icons/cg';\r\n\r\nimport { currencyCode, mode } from '../App';\r\n\r\nexport function Settings({\r\n  handleCurrencyChange,\r\n  currentCurrency,\r\n  currentSavingMode,\r\n  handleSavingMode,\r\n  reversed,\r\n  handleReversed,\r\n  ...props\r\n}) {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = React.useRef();\r\n  return (\r\n    <>\r\n      <IconButton\r\n        size='md'\r\n        fontSize='lg'\r\n        aria-label={`Open settings menu`}\r\n        variant='ghost'\r\n        color='current'\r\n        marginLeft='2'\r\n        icon={<FaCog />}\r\n        ref={btnRef}\r\n        onClick={onOpen}\r\n        {...props}\r\n      />\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement='right'\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader borderBottomWidth='1px'>Settings</DrawerHeader>\r\n            <DrawerBody>\r\n              <Stack spacing='1em'>\r\n                <Box>\r\n                  <FormLabel htmlFor='currency'>Currency</FormLabel>\r\n                  <RadioGroup\r\n                    name='currency'\r\n                    value={currentCurrency.name}\r\n                    onChange={handleCurrencyChange}\r\n                  >\r\n                    <Stack spacing={5} direction='row'>\r\n                      <Radio value={currencyCode.gbp.name}>\r\n                        {currencyCode.gbp.symbol}\r\n                      </Radio>\r\n                      <Radio value={currencyCode.usd.name}>\r\n                        {currencyCode.usd.symbol}\r\n                      </Radio>\r\n                      <Radio value={currencyCode.eur.name}>\r\n                        {currencyCode.eur.symbol}\r\n                      </Radio>\r\n                    </Stack>\r\n                  </RadioGroup>\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor='savingMode'>Saving mode</FormLabel>\r\n                  <RadioGroup\r\n                    name='savingMode'\r\n                    value={currentSavingMode}\r\n                    onChange={handleSavingMode}\r\n                  >\r\n                    <Stack spacing={5} direction='row'>\r\n                      <Radio value={mode.day}>\r\n                        1{currentCurrency.subunit} per {mode.day}\r\n                      </Radio>\r\n                      <Radio value={mode.week}>\r\n                        {currentCurrency.symbol}1 per {mode.week}\r\n                      </Radio>\r\n                    </Stack>\r\n                  </RadioGroup>\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor='reversed'>Reversed</FormLabel>\r\n                  <Text fontSize='sm'>\r\n                    Start the year off with the bigger deposits\r\n                  </Text>\r\n                  <Switch\r\n                    id='reversed'\r\n                    isChecked={reversed}\r\n                    onChange={handleReversed}\r\n                    size='lg'\r\n                  />\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor='complete-btn'>\r\n                    Complete up to today\r\n                  </FormLabel>\r\n                  <Text fontSize='sm'>Complete all days up to today</Text>\r\n                  <Button\r\n                    id='complete-btn'\r\n                    aria-label='export data'\r\n                    disabled={true}\r\n                  >\r\n                    Check up to today\r\n                  </Button>\r\n                </Box>\r\n                <Box>\r\n                  <FormLabel htmlFor='export-btn'>Export data</FormLabel>\r\n                  <Text fontSize='sm'>\r\n                    Data can be exported as a json object\r\n                  </Text>\r\n                  <Button\r\n                    id='export-btn'\r\n                    aria-label='export data'\r\n                    leftIcon={<CgExport />}\r\n                    disabled={true}\r\n                  >\r\n                    Export\r\n                  </Button>\r\n                </Box>\r\n              </Stack>\r\n            </DrawerBody>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport {\r\n  VStack,\r\n  Text,\r\n  Button,\r\n  IconButton,\r\n  Grid,\r\n  GridItem,\r\n  Fade,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  getDayOfYear,\r\n  getDaysInYear,\r\n  getISOWeeksInYear,\r\n  getISOWeek,\r\n} from \"date-fns\";\r\nimport { FaCheck, FaUndo } from \"react-icons/fa\";\r\n\r\nimport { mode } from \"../App\";\r\n\r\nexport function Today({ currencySymbol, selectedDate, savingMode, reversed }) {\r\n  const [added, setAdded] = useState(false);\r\n  const dayNumber = getDayOfYear(new Date(selectedDate)); //might have to be new Date(selectedDate)\r\n  const selectedWeek = getISOWeek(new Date(selectedDate));\r\n  const weeksThisYear = getISOWeeksInYear(new Date(selectedDate));\r\n  const daysInYear = getDaysInYear(new Date(selectedDate));\r\n  let todaysTotal;\r\n  let todaysAmount;\r\n  switch (savingMode) {\r\n    case mode.day:\r\n      todaysTotal = runningTotal(dayNumber, daysInYear, reversed) / 100;\r\n      // /100 because doing 1p/c a day\r\n      todaysAmount = todaysDeposit(dayNumber, daysInYear, reversed) / 100;\r\n      break;\r\n    case mode.week:\r\n      todaysTotal = runningTotal(selectedWeek, weeksThisYear, reversed);\r\n      todaysAmount = todaysDeposit(selectedWeek, weeksThisYear, reversed);\r\n      break;\r\n    default:\r\n      todaysTotal = runningTotal(dayNumber, daysInYear, reversed) / 100;\r\n      // /100 because doing 1p/c a day\r\n      todaysAmount = todaysDeposit(dayNumber, daysInYear, reversed) / 100;\r\n  }\r\n\r\n  return (\r\n    <VStack>\r\n      {savingMode === mode.day ? (\r\n        <Text>Today is number {dayNumber}</Text>\r\n      ) : (\r\n        <Text>\r\n          It is week {selectedWeek} out of {weeksThisYear}\r\n        </Text>\r\n      )}\r\n      <Text>\r\n        The amount to put away is {currencySymbol.symbol}\r\n        {todaysAmount.toFixed(2)}\r\n      </Text>\r\n      <Grid\r\n        gridTemplateColumns='1fr 2fr 1fr'\r\n        gridTemplateRows='1fr'\r\n        gridTemplateAreas='\". complete undo\"'\r\n      >\r\n        <GridItem gridArea='complete'>\r\n          <Button\r\n            size='lg'\r\n            variant='outline'\r\n            aria-label='Complete today'\r\n            colorScheme='green'\r\n            leftIcon={<FaCheck />}\r\n            disabled={added}\r\n            onClick={() => setAdded(true)}\r\n          >\r\n            Complete\r\n          </Button>\r\n        </GridItem>\r\n        {added === true ? (\r\n          <GridItem gridArea='undo' alignSelf='center'>\r\n            <Fade in={added}>\r\n              <IconButton\r\n                size='md'\r\n                fontSize='lg'\r\n                aria-label={`Reset today's `}\r\n                colorScheme='green'\r\n                icon={<FaUndo />}\r\n                onClick={() => setAdded(false)}\r\n              />\r\n            </Fade>\r\n          </GridItem>\r\n        ) : null}\r\n      </Grid>\r\n      <Text>\r\n        You should have {currencySymbol.symbol}\r\n        {todaysTotal.toFixed(2)} saved so far!\r\n      </Text>\r\n    </VStack>\r\n  );\r\n}\r\n\r\n/* could have a progress bar / with target value ? */\r\n\r\n/* current is the current day/week no, max is the max days or weeks in this year */\r\nfunction runningTotal(current, max, reversed = false) {\r\n  let sequence = [];\r\n  if (!reversed) {\r\n    for (let ii = current; ii > 0; ii--) {\r\n      sequence.push(ii);\r\n    }\r\n  } else {\r\n    for (let ii = max; max - current < ii; ii--) {\r\n      sequence.push(ii);\r\n    }\r\n  }\r\n  const total = sequence.reduce((acc, cur) => acc + cur, 0);\r\n  return total;\r\n}\r\n\r\nfunction todaysDeposit(current, max, reversed = false) {\r\n  let value;\r\n  if (!reversed) {\r\n    value = current;\r\n  } else {\r\n    value = max - current;\r\n  }\r\n  return value;\r\n}\r\n","import { useState } from \"react\";\r\nimport {\r\n  ChakraProvider,\r\n  Box,\r\n  VStack,\r\n  HStack,\r\n  Grid,\r\n  theme,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nimport { format, isSameMonth, isToday, parseISO, startOfMonth } from \"date-fns\";\r\nimport { MdToday } from \"react-icons/md\";\r\n\r\nimport { ColorModeSwitcher } from \"./components/ColorModeSwitcher\";\r\nimport { DatePicker } from \"./components/DatePicker\";\r\nimport { Settings } from \"./components/Settings\";\r\nimport { Today } from \"./components/Today\";\r\n\r\nexport const currencyCode = {\r\n  gbp: { symbol: \"£\", subunit: \"p\", id: 1, name: \"gbp\" },\r\n  usd: { symbol: \"$\", subunit: \"¢\", id: 2, name: \"usd\" },\r\n  eur: { symbol: \"€\", subunit: \"c\", id: 3, name: \"eur\" },\r\n};\r\n\r\nexport const mode = { day: \"day\", week: \"week\" };\r\n\r\nfunction App() {\r\n  //grab defaults from local storage\r\n  const date = new Date();\r\n  const [selectedDate, setSelectedDate] = useState(format(date, \"yyyy-MM-dd\"));\r\n  const [calendarView, setCalendarView] = useState(\r\n    startOfMonth(new Date(selectedDate))\r\n  );\r\n  const [currency, setCurrency] = useState(currencyCode.gbp);\r\n  const [savingMode, setSavingMode] = useState(mode.day);\r\n  const [reversed, setReversed] = useState(false);\r\n\r\n  const handleCurrencyChange = (newSymbol) => {\r\n    setCurrency(currencyCode[`${newSymbol}`]);\r\n  };\r\n\r\n  const handleSavingMode = (newSavingMode) => setSavingMode(newSavingMode);\r\n\r\n  const handleReversed = () => setReversed(!reversed);\r\n\r\n  const handleDatePicker = (newDate) => {\r\n    const nextDate = new Date(newDate);\r\n    setSelectedDate(format(nextDate, \"yyyy-MM-dd\"));\r\n    setCalendarView(startOfMonth(nextDate));\r\n  };\r\n  const handleShortWeekText = (locale = \"en_GB\", date) => {\r\n    // first two letters of weekday\r\n    return format(date, \"EEEEEE\");\r\n  };\r\n  const handleCalendarViewChange = ({ activeStartDate, value, view }) => {\r\n    setCalendarView(startOfMonth(activeStartDate));\r\n  };\r\n\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      <Box height='100vh' textAlign='center' fontSize='xl'>\r\n        <HStack spacing={8} justifyContent={\"flex-end\"} p={[4, 4, 4, 4]}>\r\n          <ColorModeSwitcher />\r\n          <Settings\r\n            handleCurrencyChange={handleCurrencyChange}\r\n            currentCurrency={currency}\r\n            currentSavingMode={savingMode}\r\n            handleSavingMode={handleSavingMode}\r\n            reversed={reversed}\r\n            handleReversed={handleReversed}\r\n          />\r\n        </HStack>\r\n        <Grid p={3}>\r\n          <VStack spacing={4}>\r\n            {/* would i want min/max date to be this year or nah */}\r\n            <DatePicker\r\n              id='pick-selected-date'\r\n              selectedDate={selectedDate}\r\n              onChange={handleDatePicker}\r\n              formatShortWeekday={handleShortWeekText}\r\n              onActiveStartDateChange={handleCalendarViewChange}\r\n              activeStartDate={calendarView}\r\n            />\r\n            <Button\r\n              size='lg'\r\n              variant='outline'\r\n              aria-label='Set selected back to today'\r\n              leftIcon={<MdToday />}\r\n              disabled={\r\n                isSameMonth(calendarView, parseISO(selectedDate)) &&\r\n                isToday(parseISO(selectedDate))\r\n              }\r\n              onClick={() => handleDatePicker(new Date())}\r\n            >\r\n              Back to Today\r\n            </Button>\r\n            <Today\r\n              currencySymbol={currency}\r\n              selectedDate={selectedDate}\r\n              savingMode={savingMode}\r\n              reversed={reversed}\r\n            />\r\n          </VStack>\r\n        </Grid>\r\n      </Box>\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}